# network structure configuration
network:
    # whether to use netvlad as the head. Otherwise RGP will be used
    use_vlad: False
    # whether to use resnet as the backbone. Otherwise UNet will be used
    use_resnet: True
    # If using NetVLAD, this is the number of features extracted at the last layer of the PVNet backbone. Otherwise it is the final size
    # of the descriptors
    descriptor_size: 8
    # number of clusters for NetVLAD pooling. The size of the output descriptor is descriptor_size * n_clusters
    n_clusters: 8

# data loading and augmentation configurations
data:
    # resize applied to all training input images
    resize_ratio: 0.5
    # paths in which to save (or load) the positive/negative labels for each training and validation sample
    pos_neg_map_train: "../pos_neg_maps/pletmisc_07.npy"
    pos_neg_map_val: "../pos_neg_maps/garage_07.npy"
    # sonar range parameter used during data acquisition, in meters
    sonar_range: 30
    # sonar aperture in degrees
    sonar_width: 120
    # maximum yaw difference between two scans to be considered positive (avoids positives at opposite ends of an object)
    max_sonar_angle: 60
    # threshold on sonar overlap percentage for two samples to be positives
    min_sonar_similarity: 0.7
    # cfar algorithm for image thresholding
    cfar_algorithm: "GOCA"
    # steps in angle and radius to compute the integrals for sonar overlap estimation. smaller values yield more accurate results but with a bigger
    # computational cost
    sonar_yaw_step: 3
    sonar_rho_step: 1

    # augmentation configurations
    augmentation:
        # probability of applying random jittering to a training sample
        jittering: 0.
        # extremes of the yaw range when extracting dataset samples. Useful to avoid framing empty space
        anchor_yaw_min: -60
        anchor_yaw_max: 60
    # name of the filter (in lib/utils/filters) to apply to the input dataset to differentiate between anchors, and other samples (positive or negatives)
    filter: 'garage'
    # number of positive samples for each anchor. Useful for hard triplet mining
    n_positives: 4
    # number of negative samples for each anchor. Useful for hard triplet mining
    n_negatives: 20
    # target width and height for test images
    test_width: 256
    test_height: 200
    # width of the 360deg training images
    train_width: 1536
# network training configurations
train:
    # training batch size
    batch_size: 16
    # the trained model is savevaluateded once every 'eval_ep' epoches
    eval_ep: 10
    # the trained model is saved once every 'save_ep' epoches
    save_ep: 10
    # initial network training rate
    learning_rate: 0.001
    # weight decay normalization weight
    weight_decay: 0.
    # milestones for udating the learning rate
    milestones: [20, 40, 60, 80, 100, 120, 160, 180, 200, 220]
    # learning rate decay
    gamma: 0.5
    # if False, removes the previous pretrained model and starts from scratch
    resume: True
    # if True each training triplet will be displayed before being given in input to the network
    show_triplets: False
    # margin for the triplet margin loss
    margin: 0.7
    # whether or not to use triplet ratio loss during training
    use_ratio: False
    # wheter or not to use arcface during training. Deprecated
    use_arcface: False

# network evaluation configurations
eval:
    # number of nearest neighbors to retrieve for each test sample 
    knn: 4
    # stride of the sliding window over the dataset 360Â° feature maps
    scan_stride: 2
    # batch size for dataset decriptor computation
    batch_size: 16
    # if True it will display each test sample classified as false positive, along with each retrieved nearest neighbor and the actual closest dataset sample
    display: True
